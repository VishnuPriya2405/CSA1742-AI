% Declare dynamic predicates
:- dynamic fact/2.

% Define facts and rules
fact(has_fur, dog).
fact(has_tail, dog).
fact(has_fur, cat).
fact(has_tail, cat).
fact(has_feathers, bird).

rule(mammal, X) :-
    fact(has_fur, X),
    fact(has_tail, X).

rule(animals, X) :-
    fact(has_fur, X).

rule(animals, X) :-
    fact(has_feathers, X).

% Predicate to check if a goal can be entailed from the knowledge base
entails(Goal, X, _) :- fact(Goal, X).
entails(Goal, X, Derived) :-
    rule(Goal, X),
    \+ member((Goal, X), Derived), % Check if not already derived
    check_conditions(Goal, X, [Goal | Derived]).

% Predicate to use backward chaining to prove a goal
prove(Goal, X) :-
    entails(Goal, X, []),
    write('Goal '), write(Goal), write(' is proved for '), write(X), nl.

prove(Goal, X) :-
    \+ entails(Goal, X, []),
    write('Goal '), write(Goal), write(' cannot be proved for '), write(X), nl.

% Check if all conditions of a rule are satisfied
check_conditions(mammal, X, _) :-
    fact(has_fur, X),
    fact(has_tail, X).

check_conditions(animals, X, _) :-
    (fact(has_fur, X); fact(has_feathers, X)).
